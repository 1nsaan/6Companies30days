class Solution {
    public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
        int graph[][] = new int[26][26];

        for (int i = 0; i < 26; i++) {
            for (int j = 0; j < 26; j++) {
                if (i != j)
                    graph[i][j] = Integer.MAX_VALUE;
            }
        }

        for (int i = 0; i < original.length; i++){
            int row = original[i] - 'a';
            int col = changed[i] - 'a';
            graph[row][col] = Math.min(graph[row][col], cost[i]);
        }

        for (int k = 0; k < 26; k++) {
            for (int i = 0; i < 26; i++) {
                for (int j = 0; j < 26; j++)
                    if (graph[i][k] != Integer.MAX_VALUE &&
                            graph[k][j] != Integer.MAX_VALUE)
                        graph[i][j] = Math.min(graph[i][j], graph[i][k] + graph[k][j]);
            }
        }
        long ans=0;
        for(int i=0;i<source.length();i++){
            long currCost = graph[source.charAt(i)-'a'][target.charAt(i)-'a'];
            if(currCost == Integer.MAX_VALUE) return -1;
            ans+= currCost;
        }

        return ans;
    }
}
