//{ Driver Code Starts
// Initial template for JAVA

import java.io.*;
import java.lang.*;
import java.util.*;

public class Main {
    public static void main(String args[]) throws IOException {
        // taking input using class Scanner
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(br.readLine());

        while (t-- > 0) {
            // taking total number of elements
            String line = br.readLine();
            String[] tokens = line.split(" ");

            // Create an ArrayList to store the integers
            ArrayList<Integer> array = new ArrayList<>();

            // Parse the tokens into integers and add to the array
            for (String token : tokens) {
                array.add(Integer.parseInt(token));
            }

            int[] arr = new int[array.size()];
            int idx = 0;
            for (int i : array) arr[idx++] = i;
            int k = Integer.parseInt(br.readLine());
            ArrayList<Integer> res = new Solution().max_of_subarrays(arr, k);

            // printing the elements of the ArrayList
            for (int i = 0; i < res.size(); i++) System.out.print(res.get(i) + " ");
            System.out.println();
            System.out.println("~");
        }
    }
}
// } Driver Code Ends



class Solution {
    public ArrayList<Integer> max_of_subarrays(int arr[], int k) {
        
        ArrayList<Integer> ans = new ArrayList<>();
        
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        
        int start = 0, end = 0;
        while (end < k) {
            
            pq.offer(arr[end]);
            frequencyMap.put(arr[end], frequencyMap.getOrDefault(arr[end], 0) + 1);
            end++;
        }
        
       
        ans.add(pq.peek());
        
       
        while (end < arr.length) {
            
            pq.offer(arr[end]);
            frequencyMap.put(arr[end], frequencyMap.getOrDefault(arr[end], 0) + 1);
            
           
            frequencyMap.put(arr[start], frequencyMap.get(arr[start]) - 1);
            
            // Remove elements from priority queue that are no longer in the window
            while (!pq.isEmpty() && frequencyMap.get(pq.peek()) == 0) {
                pq.poll();
            }
            
            // Add max of current window
            ans.add(pq.peek());
            
            // Move window
            start++;
            end++;
        }
        
        return ans;
    }
}
